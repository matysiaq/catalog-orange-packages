---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cnos-elasticsearch-master
  namespace: cnos-system
  labels:
    app: "cnos-elasticsearch-master"
spec:
  serviceName: cnos-elasticsearch-master-headless
  selector:
    matchLabels:
      app: "cnos-elasticsearch-master"
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: cnos-elasticsearch-master
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
        storageClassName: standard
  template:
    metadata:
      name: "cnos-elasticsearch-master"
      labels:
        app: "cnos-elasticsearch-master"
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - "cnos-elasticsearch-master"
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: esconfig
          configMap:
            name: cnos-elasticsearch-master-config
        - name: cnos-elasticsearch-certs
          secret:
            secretName: cnos-elasticsearch-master-certs
      enableServiceLinks: true
      containers:
        - name: "elasticsearch"
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
          image: "docker.elastic.co/elasticsearch/elasticsearch:8.13.0"
          imagePullPolicy: "IfNotPresent"
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  set -e
                  
                  # Exit if ELASTIC_PASSWORD in unset
                  if [ -z "${ELASTIC_PASSWORD}" ]; then
                    echo "ELASTIC_PASSWORD variable is missing, exiting"
                    exit 1
                  fi
                  
                  # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                  # Once it has started only check that the node itself is responding
                  START_FILE=/tmp/.es_start_file
                  
                  # Disable nss cache to avoid filling dentry cache when calling curl
                  # This is required with Elasticsearch Docker using nss < 3.52
                  export NSS_SDB_USE_CACHE=no
                  
                  http () {
                    local path="${1}"
                    local args="${2}"
                    set -- -XGET -s
                  
                    if [ "$args" != "" ]; then
                      set -- "$@" $args
                    fi
                  
                    set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"
                  
                    curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                  }
                  
                  if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    HTTP_CODE=$(http "/" "-w %{http_code}")
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                      exit ${RC}
                    fi
                    # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      exit 0
                    elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                      exit 0
                    else
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                      exit 1
                    fi
                  
                  else
                    echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                    if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                      touch ${START_FILE}
                      exit 0
                    else
                      echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                      exit 1
                    fi
                  fi
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: discovery.type
              value: "single-node"
            - name: node.roles
              value: "master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,"
            - name: network.host
              value: "0.0.0.0"
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cnos-elasticsearch-master-credentials
                  key: password
            - name: xpack.security.enabled
              value: "true"
            - name: xpack.security.transport.ssl.enabled
              value: "true"
            - name: xpack.security.http.ssl.enabled
              value: "true"
            - name: xpack.security.transport.ssl.verification_mode
              value: "certificate"
            - name: xpack.security.transport.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.transport.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.transport.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"
            - name: xpack.security.http.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.http.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.http.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"
          volumeMounts:
            - name: "cnos-elasticsearch-master"
              mountPath: /usr/share/elasticsearch/data
            - name: cnos-elasticsearch-certs
              mountPath: /usr/share/elasticsearch/config/certs
              readOnly: true
            - name: esconfig
              mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
              subPath: elasticsearch.yml
